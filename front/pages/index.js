import Head from 'next/head'
import styles from '../styles/Home.module.css'
import Link from 'next/link'
import {useEffect, useState} from "react";
import axios from "axios";
import {useRouter} from "next/router";
import {useReducerWithReduxDevtools} from "next/dist/client/components/use-reducer-with-devtools";
import Image from "next/image";

export function MyHead({title}) {
    return (
        <Head>
            <title>{title + ' - Weather App'}</title>
            <meta name="description" content="Generated by create next app"/>
            <link rel="icon" href="/icons/cloud.png"/>
        </Head>
    )
}

export function MyTitle() {
    return ( <div className={styles.title}>
            <h1>Weather App</h1>
            <p>by <a href={"https://github.com/ericard42"}>ericard</a></p>
        </div>
    )
}

function Connexion() {
    return (
        <div className={styles.login_box}>
            <Link href={"/login"}>
                <a className={styles.text}>
                    Login
                </a>
            </Link>
            {" or "}
            <Link href={"/inscription"}>
                <a className={styles.text}>
                    Inscription
                </a>
            </Link>
        </div>
    )
}

function Welcome({username}) {
    const router = useRouter()

    const disconnect = (e) => {
        window.localStorage.clear()
        router.reload()
        return true
    }

    return (
        <div className={styles.welcome}>
            <p>Welcome {username} !</p>
            <button onClick={disconnect} className={styles.text}>Disconnect</button>
        </div>

    )
}

function Favorites({tab, handleDelete, username, token}) {
    const [index, setIndex] = useState(0)

    const prevFav = () => {
        if (index - 1 >= 0)
            setIndex(index - 1)
    }

    const nextFav = () => {
        if (index + 1 < tab.length)
            setIndex(index + 1)
    }

    const removeFav = async () => {
        await axios ({
            method: "DELETE",
            url: "http://localhost:3000/favorite/" + username,
            data: {
                city: tab[index].city,
                country: tab[index].country
            },
            headers: {
                Authorization: 'Bearer ' + token,
                "content-type": "application/json",
            }
        })
            .then(() => {
                handleDelete(index)
                setIndex(0)
            })
            .catch((e) => {
                throw e
            })
    }

    return (
        <div className={styles.favorite_box}>
            <h3>Favorites</h3>
            { tab.length > 0 &&
            <div className={styles.favorite_loc}>
                <button onClick={prevFav}>
                    <Image width={"30px"} height={"30px"} src={"/icons/arrow-left.png"}/>
                </button>
                <div className={styles.favorite_info}>
                    {tab[index].city}<br/>
                    {tab[index].country}<br/>
                    {tab[index].weather}°C<br/>
                    {tab[index].rain}%<br/>
                    <button onClick={removeFav}>
                        <Image width={"20px"} height={"20px"} src={"/icons/star-in-fav.png"}/>
                    </button>
                </div>
                <button onClick={nextFav}>
                    <Image width={"30px"} height={"30px"} src={"/icons/arrow-right.png"}/>
                </button>
            </div>
            }
        </div>
    )
}

function CurrentLocation({city, country, weather, precipitation}) {
    return (
        <div className={styles.location}>
            <h1>{city} - {country}</h1>
            <div className={styles.info_location}>
                <Image width={"50px"} height={"50px"} src={"/icons/cloud.png"}/>
                <div className={styles.temperature}>
                        {weather}°C <br/>
                        {precipitation}%
                </div>
            </div>
        </div>
    )
}

function Search() {
    return (
        <div className={styles.search_box}>
            <h3>Search Location :</h3>
            <input type={"text"} name={"location"}></input>
        </div>
    )
}

export default function Home() {
    const [name, setName] = useState("")
    const [cur_loc, setCurLoc] = useState({})
    const [curFav, setCurFav] = useState({})
    const [token, setToken] = useState("")
    let username = ""
    let tmpToken = ""


    const getFavorites = async () => {
        return await axios({
            method: 'GET',
            url: 'http://localhost:3000/favorite/' + username,
            headers: {
                Authorization: 'Bearer ' + tmpToken,
                "content-type": "application/json",
            }
        })
            .then((res) => {
                if (res.data.isFavorite) {
                    setCurFav(res.data)
                }
            })
            .catch((e) => {
                throw e
            })
    }

    const getWeather = async (username, city, country) => {
        return await axios({
            method: "POST",
            url: 'http://localhost:3000/location',
            data: {
                city: city,
                country: country,
            }
        })
            .then((res) => {
                setCurLoc({
                    city: city,
                    country: country,
                    weather: res.data.weather,
                    precipitation: res.data.rain
                })
            })
            .catch((e) => {
                throw e
            })
    }

    const checkUser = async () => {
        const url = "http://localhost:3000/user/" + username
        return await axios({
            method: 'GET',
            url: url,
            headers: {
                Authorization: 'Bearer ' + tmpToken,
                "content-type": "application/json",
            }
        })
            .then(async (response) => {
                await getWeather(username, response.data.location.city, response.data.location.country)
                await getFavorites(name);
                console.log(curFav)
                return true
            })
            .catch((e) => {
                throw e
            })
    }

    const handleDelete = (index) => {
        let tab = curFav.Favorites.map(a => {return {...a}})
        if (index > -1) {
            tab.splice(index, 1)
            if (tab.length > 0)
                setCurFav({isFavorite: true, Favorites: tab})
            else
                setCurFav({isFavorite: false})
        }
    }

    useEffect(  () => {
        tmpToken = window.localStorage.getItem("session")
        username = window.localStorage.getItem("username")

        if (!tmpToken || !username) {
            console.log("Not Logged in")
        }
        else {
            (async () => {
                console.log("Logged In")
                if (await checkUser() === true) {
                    console.log("Verification is good")
                    setName(username)
                    setToken(tmpToken)
                }
                else {
                    console.log("Verification is bad")
                    throw 'User not found'
                }
            })()
                .catch((e) => {
                    throw e
                })
        }
        return () => {}
    }, [])

  return (
    <div className={styles.container}>
      <MyHead title={'Home'}/>

      <main className={styles.main}>
        <MyTitle/>
          <div className={styles.content}>
              <div className={styles.content_left}>
                  { name !== "" ? <Welcome username={name}/> : <Connexion/> }
                  <Search/>
              </div>
              <div className={styles.content_right}>
                  { name !== "" && (
                      <CurrentLocation city={cur_loc.city} country={cur_loc.country}
                                       precipitation={cur_loc.precipitation} weather={cur_loc.weather}/>
                  )}
                  { name !== "" && curFav.isFavorite && (
                      <Favorites tab={curFav.Favorites} handleDelete={handleDelete} username={name} token={token}/>
                  )}
              </div>
          </div>
      </main>

    </div>
  )
}
